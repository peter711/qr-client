{"version":3,"sources":["components/QRReader/services/QRReaderService.ts","components/QRReader/components/DevicesList.tsx","components/QRReader/components/QRReader.tsx","components/QRReader/index.ts","components/Layout.tsx","features/homepage/index.ts","features/homepage/components/Homepage.tsx","features/success/components/Success.tsx","features/success/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["QRReaderService","reader","this","BrowserMultiFormatReader","listVideoInputDevices","deviceId","callback","decodeFromVideoDevice","stopAsyncDecode","Option","Select","StyledDevicesList","styled","className","mediaDeviceInfo","defaultValue","onDeviceChange","bordered","onChange","map","index","label","value","Paragraph","Typography","QRReader","onSuccessScan","onErrorScan","qrService","useMemo","useState","devices","setDevices","isScaning","setIsScaning","selectedDeviceId","setSelectedDeviceId","handleOnScanClick","useCallback","decode","result","err","text","getText","NotFoundException","useEffect","getDevicesList","then","stopDecoding","id","width","height","InfoCircleTwoTone","type","onClick","BarcodeOutlined","LayoutWrapper","div","Layout","children","Homepage","history","useHistory","isProcessing","setIsProccesing","handleSuccessfullScan","setTimeout","replace","pathname","size","Success","handleScanNextClick","CheckCircleTwoTone","strong","icon","SearchOutlined","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58b941c8.chunk.js","sourcesContent":["import {\r\n  BrowserMultiFormatReader,\r\n  DecodeContinuouslyCallback,\r\n} from \"@zxing/library\";\r\n\r\nexport default class QRReaderService {\r\n  private reader: BrowserMultiFormatReader;\r\n\r\n  constructor() {\r\n    this.reader = new BrowserMultiFormatReader();\r\n  }\r\n\r\n  getDevicesList() {\r\n    return this.reader.listVideoInputDevices();\r\n  }\r\n\r\n  decode(deviceId: string, callback: DecodeContinuouslyCallback) {\r\n    this.reader.decodeFromVideoDevice(deviceId, \"video\", callback);\r\n  }\r\n\r\n  stopDecoding() {\r\n    this.reader.stopAsyncDecode();\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Select } from \"antd\";\r\nimport styled from \"styled-components\";\r\n\r\nconst { Option } = Select;\r\n\r\ninterface IDevicesListProps {\r\n  className?: string;\r\n  mediaDeviceInfo: MediaDeviceInfo[];\r\n  defaultValue?: string;\r\n  onDeviceChange?: (id: string) => void;\r\n}\r\n\r\nconst DevicesList = ({\r\n  className,\r\n  mediaDeviceInfo,\r\n  defaultValue,\r\n  onDeviceChange,\r\n}: IDevicesListProps) => {\r\n  return (\r\n    <Select\r\n      bordered={false}\r\n      onChange={onDeviceChange}\r\n      defaultValue={defaultValue}\r\n      className={`${className}`}\r\n    >\r\n      {mediaDeviceInfo?.map(({ deviceId, label }, index) => (\r\n        <Option key={`${deviceId}__${index}`} value={deviceId}>\r\n          {label}\r\n        </Option>\r\n      ))}\r\n    </Select>\r\n  );\r\n};\r\n\r\nconst StyledDevicesList = styled(DevicesList)`\r\n  width: 100%;\r\n`;\r\n\r\nexport default StyledDevicesList;\r\n","import { Exception, NotFoundException } from \"@zxing/library\";\r\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { BarcodeOutlined, InfoCircleTwoTone } from \"@ant-design/icons\";\r\nimport { Typography } from \"antd\";\r\n\r\nimport QRReaderService from \"../services/QRReaderService\";\r\nimport DevicesList from \"./DevicesList\";\r\n\r\nconst { Paragraph } = Typography;\r\n\r\ninterface QRReaderProps {\r\n  className?: string;\r\n  onSuccessScan?: (text: string) => void;\r\n  onErrorScan?: (err: Exception) => void;\r\n}\r\n\r\nconst QRReader = ({ className, onSuccessScan, onErrorScan }: QRReaderProps) => {\r\n  const qrService = useMemo(() => new QRReaderService(), []);\r\n  const [devices, setDevices] = useState<MediaDeviceInfo[]>();\r\n  const [isScaning, setIsScaning] = useState<boolean>(false);\r\n  const [selectedDeviceId, setSelectedDeviceId] = useState<string | null>(null);\r\n\r\n  const handleOnScanClick = useCallback(() => {\r\n    if (selectedDeviceId) {\r\n      setIsScaning(true);\r\n      qrService.decode(selectedDeviceId, (result, err) => {\r\n        if (result) {\r\n          const text = result.getText();\r\n          if (onSuccessScan) onSuccessScan(text);\r\n        }\r\n        if (err && !(err instanceof NotFoundException)) {\r\n          if (onErrorScan) onErrorScan(err);\r\n        }\r\n      });\r\n    }\r\n  }, [onErrorScan, onSuccessScan, qrService, selectedDeviceId]);\r\n\r\n  useEffect(() => {\r\n    qrService.getDevicesList().then((devices) => {\r\n      setDevices(devices);\r\n      setSelectedDeviceId(devices[0].deviceId);\r\n    });\r\n\r\n    return () => {\r\n      qrService.stopDecoding();\r\n    };\r\n  }, [qrService]);\r\n\r\n  return (\r\n    <div className={className}>\r\n      {devices && selectedDeviceId !== null && (\r\n        <div>\r\n          <DevicesList\r\n            mediaDeviceInfo={devices}\r\n            defaultValue={selectedDeviceId}\r\n            onDeviceChange={setSelectedDeviceId}\r\n          />\r\n        </div>\r\n      )}\r\n      {isScaning && (\r\n        <div className=\"video-area\">\r\n          <video id=\"video\" width=\"300\" height=\"200\" />\r\n          <div className=\"video-hint\">\r\n            <InfoCircleTwoTone className=\"info-icon\" />\r\n            <Paragraph type=\"secondary\" className=\"hint\">\r\n              Use your camera to scan QR code\r\n            </Paragraph>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {!isScaning && (\r\n        <div className=\"barcode\" onClick={handleOnScanClick}>\r\n          <BarcodeOutlined className=\"barcode-icon\" />\r\n          <Paragraph type=\"secondary\">Tap to scan QR code</Paragraph>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst StyledQRReader = styled(QRReader)`\r\n  height: 100%;\r\n  display: grid;\r\n  grid-template-columns: max-content;\r\n  grid-template-rows: 10% auto;\r\n  justify-content: center;\r\n  text-align: center;\r\n\r\n  .video-hint {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    .info-icon {\r\n      margin-right: 10px;\r\n      font-size: 18px;\r\n    }\r\n\r\n    .hint {\r\n      margin: 0;\r\n    }\r\n\r\n    margin-bottom: 1em;\r\n  }\r\n\r\n  .barcode-icon {\r\n    font-size: 200px;\r\n  }\r\n`;\r\n\r\nexport default StyledQRReader;\r\n","import QRReader from \"./components/QRReader\";\r\n\r\nexport default QRReader;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst LayoutWrapper = styled.div`\r\n  height: 100vh;\r\n  padding: 1em 0.5em 1em 0.5em;\r\n  position: relative;\r\n`;\r\n\r\ninterface ILayoutProps extends React.Props<{}> {\r\n  className?: string;\r\n}\r\n\r\nconst Layout = ({ children, className }: ILayoutProps) => {\r\n  return <LayoutWrapper className={className}>{children}</LayoutWrapper>;\r\n};\r\n\r\nexport default Layout;\r\n","import Homepage from \"./components/Homepage\";\r\nexport default Homepage;","import React, { useCallback, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport { Spin } from \"antd\";\r\n\r\nimport QRReader from \"components/QRReader\";\r\nimport Layout from \"components/Layout\";\r\n\r\ninterface IHomepageProps {\r\n  className?: string;\r\n}\r\n\r\nconst Homepage = ({ className }: IHomepageProps) => {\r\n  const history = useHistory();\r\n  const [isProcessing, setIsProccesing] = useState<boolean>(false);\r\n\r\n  const handleSuccessfullScan = useCallback(\r\n    (text: string) => {\r\n      setIsProccesing(true);\r\n\r\n      setTimeout(() => {\r\n        history.replace({\r\n          pathname: \"/success\",\r\n        });\r\n      }, 3 * 1000);\r\n    },\r\n    [history]\r\n  );\r\n\r\n  return (\r\n    <Layout className={className}>\r\n      {isProcessing && <Spin className=\"activity-indicator\" size=\"large\" />}\r\n      {!isProcessing && <QRReader onSuccessScan={handleSuccessfullScan} />}\r\n    </Layout>\r\n  );\r\n};\r\n\r\nconst StyledHomepage = styled(Homepage)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport default StyledHomepage;\r\n","import React, { useCallback } from \"react\";\r\nimport { CheckCircleTwoTone, SearchOutlined } from \"@ant-design/icons\";\r\nimport styled from \"styled-components\";\r\nimport { Typography, Button } from \"antd\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport Layout from \"components/Layout\";\r\n\r\nconst { Paragraph } = Typography;\r\n\r\ninterface ISuccessProps {\r\n  className?: string;\r\n}\r\n\r\nconst Success = ({ className }: ISuccessProps) => {\r\n  const history = useHistory();\r\n  const handleScanNextClick = useCallback(() => {\r\n    history.replace({\r\n      pathname: \"/\",\r\n    });\r\n  }, [history]);\r\n\r\n  return (\r\n    <Layout className={className}>\r\n      <div>\r\n        <CheckCircleTwoTone className=\"success-icon\" />\r\n        <Paragraph type=\"success\" className=\"success-message\" strong={true}>\r\n          Congratulations!\r\n        </Paragraph>\r\n        <Paragraph type=\"secondary\" className=\"success-message\">\r\n          Your product is verified and original. Thanks for your trust!\r\n        </Paragraph>\r\n      </div>\r\n      <div>\r\n        <Button\r\n          onClick={handleScanNextClick}\r\n          icon={<SearchOutlined />}\r\n          type=\"link\"\r\n        >\r\n          Scan next\r\n        </Button>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nconst StyledSuccess = styled(Success)`\r\n  display: grid;\r\n  grid-template-columns: max-content;\r\n  grid-template-rows: 90% auto;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n\r\n  .success-icon {\r\n    font-size: 108px;\r\n  }\r\n\r\n  .success-message {\r\n    margin-top: 1em;\r\n    max-width: 100vw;\r\n  }\r\n`;\r\n\r\nexport default StyledSuccess;\r\n","import Success from \"./components/Success\";\r\nexport default Success;\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nimport Homepage from \"./features/homepage\";\r\nimport Success from \"./features/success\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Homepage />\r\n        </Route>\r\n        <Route exact path=\"/success\">\r\n          <Success />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nimport 'antd/dist/antd.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}